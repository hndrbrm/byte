// Copyright 2022. Please see the AUTHORS file for details.
// All rights reserved. Use of this source code is governed
// by a BSD-style license that can be found in the LICENSE file.

import 'package:byte/byte.dart';
import 'package:test/test.dart';

void main() {
  group('A group of bigint tests', (){
    test('bigIntToBytesLittle', () {
      expect(
        bigIntToInts8Little(BigInt.parse('1122334455667788', radix: 16), 8),
        [ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
      );
      expect(
        bigIntToInts8Little(BigInt.parse('11223344556677', radix: 16), 8),
        [ 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0x00 ],
      );
      expect(
        bigIntToInts8Little(BigInt.parse('1122334455667788', radix: 16), 7),
        [ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22 ],
      );
      expect(
        bigIntToInts8Little(BigInt.parse('ffffffffffffffff', radix: 16), 8),
        [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ],
      );
    });
    test('bigIntToBytesNLittle', () {
      expect(
        bigIntNToInts8Little(BigInt.parse('1122334455667788', radix: 16)),
        [ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
      );
      expect(
        bigIntNToInts8Little(BigInt.parse('0011223344556677', radix: 16)),
        [ 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
      );
      expect(
        bigIntNToInts8Little(BigInt.parse('ffffffffffffffff', radix: 16)),
        [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ],
      );
    });
    test('bigIntToBytes64Little', () {
      expect(
        bigInt64ToInts8Little(BigInt.parse('1122334455667788', radix: 16)),
        [ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
      );
      expect(
        bigInt64ToInts8Little(BigInt.parse('001122334455667788', radix: 16)),
        [ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
      );
      expect(
        bigInt64ToInts8Little(BigInt.parse('ffffffffffffffff', radix: 16)),
        [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ],
      );
    });
    test('bigIntToBytes128Little', () {
      expect(
        bigInt128ToInts8Little(BigInt.parse('112233445566778899aabbccddeeff11', radix: 16)),
        [ 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
      );
      expect(
        bigInt128ToInts8Little(BigInt.parse('00112233445566778899aabbccddeeff11', radix: 16)),
        [ 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
      );
      expect(
        bigInt128ToInts8Little(BigInt.parse('ffffffffffffffffffffffffffffffff', radix: 16)),
        [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ],
      );
    });
    test('bigIntToBytes256Little', () {
      expect(
        bigInt256ToInts8Little(BigInt.parse('112233445566778899aabbccddeeff112233445566778899aabbccddeeff1122', radix: 16)),
        [ 0x22, 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
      );
      expect(
        bigInt256ToInts8Little(BigInt.parse('00112233445566778899aabbccddeeff112233445566778899aabbccddeeff1122', radix: 16)),
        [ 0x22, 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
      );
      expect(
        bigInt256ToInts8Little(BigInt.parse('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', radix: 16)),
        [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ],
      );
    });

    test('bigIntToBytesBig', () {
      expect(
        bigIntToInts8Big(BigInt.parse('1122334455667788', radix: 16), 8),
        [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88 ],
      );
      expect(
        bigIntToInts8Big(BigInt.parse('11223344556677', radix: 16), 8),
        [ 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77 ],
      );
      expect(
        bigIntToInts8Big(BigInt.parse('1122334455667788', radix: 16), 7),
        [ 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88 ],
      );
      expect(
        bigIntToInts8Big(BigInt.parse('ffffffffffffffff', radix: 16), 8),
        [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ],
      );
    });
    test('bigIntToBytesNBig', () {
      expect(
        bigIntNToInts8Big(BigInt.parse('1122334455667788', radix: 16)),
        [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88 ],
      );
      expect(
        bigIntNToInts8Big(BigInt.parse('0011223344556677', radix: 16)),
        [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77 ],
      );
      expect(
        bigIntNToInts8Big(BigInt.parse('ffffffffffffffff', radix: 16)),
        [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ],
      );
    });
    test('bigIntToBytes64Big', () {
      expect(
        bigInt64ToInts8Big(BigInt.parse('1122334455667788', radix: 16)),
        [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88 ],
      );
      expect(
        bigInt64ToInts8Big(BigInt.parse('001122334455667788', radix: 16)),
        [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88 ],
      );
      expect(
        bigInt64ToInts8Big(BigInt.parse('ffffffffffffffff', radix: 16)),
        [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ],
      );
    });
    test('bigIntToBytes128Big', () {
      expect(
        bigInt128ToInts8Big(BigInt.parse('112233445566778899aabbccddeeff11', radix: 16)),
        [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11 ],
      );
      expect(
        bigInt128ToInts8Big(BigInt.parse('112233445566778899aabbccddeeff11', radix: 16)),
        [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11 ],
      );
      expect(
        bigInt128ToInts8Little(BigInt.parse('ffffffffffffffffffffffffffffffff', radix: 16)),
        [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ],
      );
    });
    test('bigIntToBytes256Big', () {
      expect(
        bigInt256ToInts8Big(BigInt.parse('112233445566778899aabbccddeeff112233445566778899aabbccddeeff1122', radix: 16)),
        [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11, 0x22 ],
      );
      expect(
        bigInt256ToInts8Big(BigInt.parse('00112233445566778899aabbccddeeff112233445566778899aabbccddeeff1122', radix: 16)),
        [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11, 0x22 ],
      );
      expect(
        bigInt256ToInts8Big(BigInt.parse('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', radix: 16)),
        [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ],
      );
    });

    test('bigIntToBytes', () {
      expect(
        bigIntToInts8(BigInt.parse('1122334455667788', radix: 16), 8, Endian.little),
        [ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
      );
      expect(
        bigIntToInts8(BigInt.parse('1122334455667788', radix: 16), 8, Endian.big),
        [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88 ],
      );
    });
    test('bigIntToBytesN', () {
      expect(
        bigIntNToInts8(BigInt.parse('1122334455667788', radix: 16), Endian.little),
        [ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
      );
      expect(
        bigIntNToInts8(BigInt.parse('1122334455667788', radix: 16), Endian.big),
        [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88 ],
      );
    });
    test('bigIntToBytes64', () {
      expect(
        bigInt64ToInts8(BigInt.parse('1122334455667788', radix: 16), Endian.little),
        [ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
      );
      expect(
        bigInt64ToInts8(BigInt.parse('1122334455667788', radix: 16), Endian.big),
        [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88 ],
      );
    });
    test('bigIntToBytes128', () {
      expect(
        bigInt128ToInts8(BigInt.parse('112233445566778899aabbccddeeff11', radix: 16), Endian.little),
        [ 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
      );
      expect(
        bigInt128ToInts8(BigInt.parse('112233445566778899aabbccddeeff11', radix: 16), Endian.big),
        [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11 ],
      );
    });
    test('bigIntToBytes256', () {
      expect(
        bigInt256ToInts8(BigInt.parse('112233445566778899aabbccddeeff112233445566778899aabbccddeeff1122', radix: 16), Endian.little),
        [ 0x22, 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
      );
      expect(
        bigInt256ToInts8(BigInt.parse('112233445566778899aabbccddeeff112233445566778899aabbccddeeff1122', radix: 16), Endian.big),
        [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11, 0x22 ],
      );
    });

    test('bytesToBigIntLittle', () {
      expect(
        ints8ToBigIntLittle([ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], 0, 8),
        BigInt.parse('1122334455667788', radix: 16),
      );
    });
    test('bytesNToBigIntLittle', () {
      expect(
        ints8ToBigIntNLittle([ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], 1),
        BigInt.parse('11223344556677', radix: 16),
      );
    });
    test('bytes64ToBigIntLittle', () {
      expect(
        ints8ToBigInt64Little([ 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ]),
        BigInt.parse('2233445566778899', radix: 16),
      );
    });
    test('bytes128ToBigIntLittle', () {
      expect(
        ints8ToBigInt128Little([ 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ]),
        BigInt.parse('112233445566778899aabbccddeeff11', radix: 16),
      );
    });
    test('bytes256ToBigIntLittle', () {
      expect(
        ints8ToBigInt256Little([ 0x22, 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ]),
        BigInt.parse('112233445566778899aabbccddeeff112233445566778899aabbccddeeff1122', radix: 16),
      );
    });

    test('bytesToBigIntBig', () {
      expect(
        ints8ToBigIntBig([ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], 0, 8),
        BigInt.parse('8877665544332211', radix: 16),
      );
    });
    test('bytesNToBigIntBig', () {
      expect(
        ints8ToBigIntNBig([ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], 1),
        BigInt.parse('77665544332211', radix: 16),
      );
    });
    test('bytes64ToBigIntBig', () {
      expect(
        ints8ToBigInt64Big([ 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ]),
        BigInt.parse('9988776655443322', radix: 16),
      );
    });
    test('bytes128ToBigIntBig', () {
      expect(
        ints8ToBigInt128Big([ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11 ]),
        BigInt.parse('112233445566778899aabbccddeeff11', radix: 16),
      );
    });
    test('bytes256ToBigIntBig', () {
      expect(
        ints8ToBigInt256Big([ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11, 0x22 ]),
        BigInt.parse('112233445566778899aabbccddeeff112233445566778899aabbccddeeff1122', radix: 16),
      );
    });

    test('bytesToBigInt', () {
      expect(
        ints8ToBigInt([ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], 0, 8, Endian.little),
        BigInt.parse('1122334455667788', radix: 16),
      );
      expect(
        ints8ToBigInt([ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], 0, 8, Endian.big),
        BigInt.parse('8877665544332211', radix: 16),
      );
    });
    test('bytesNToBigInt', () {
      expect(
        ints8ToBigIntN([ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], endian: Endian.little),
        BigInt.parse('1122334455667788', radix: 16),
      );
      expect(
        ints8ToBigIntN([ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], endian: Endian.big),
        BigInt.parse('8877665544332211', radix: 16),
      );
    });
    test('bytes64ToBigInt', () {
      expect(
        ints8ToBigInt64([ 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], endian: Endian.little),
        BigInt.parse('2233445566778899', radix: 16),
      );
      expect(
        ints8ToBigInt64([ 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], endian: Endian.big),
        BigInt.parse('9988776655443322', radix: 16),
      );
    });
    test('bytes128ToBigInt', () {
      expect(
        ints8ToBigInt128([ 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], endian: Endian.little),
        BigInt.parse('112233445566778899aabbccddeeff11', radix: 16),
      );
      expect(
        ints8ToBigInt128([ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11 ], endian: Endian.big),
        BigInt.parse('112233445566778899aabbccddeeff11', radix: 16),
      );
    });
    test('bytes256ToBigInt', () {
      expect(
        ints8ToBigInt256([ 0x22, 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], endian: Endian.little),
        BigInt.parse('112233445566778899aabbccddeeff112233445566778899aabbccddeeff1122', radix: 16),
      );
      expect(
        ints8ToBigInt256([ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11, 0x22 ], endian: Endian.big),
        BigInt.parse('112233445566778899aabbccddeeff112233445566778899aabbccddeeff1122', radix: 16),
      );
    });

    test('bytesToBigIntLittleAndRemoved', () {
      final List<int> bytes = <int>[ 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToBigIntLittleAndRemoved(bytes, 1, 9), BigInt.parse('2233445566778899', radix: 16));
      expect(bytes.length, 2);
    });
    test('bytesNToBigIntLittleAndRemoved', () {
      final List<int> bytes = <int>[ 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToBigIntNLittleAndRemoved(bytes, 1), BigInt.parse('112233445566778899', radix: 16));
      expect(bytes.length, 1);
    });
    test('bytes64ToBigIntLittleAndRemoved', () {
      final List<int> bytes = <int>[ 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToBigInt64LittleAndRemoved(bytes, 1), BigInt.parse('2233445566778899', radix: 16));
      expect(bytes.length, 2);
    });
    test('bytes128ToBigIntLittleAndRemoved', () {
      final List<int> bytes = <int>[ 0x22, 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToBigInt128LittleAndRemoved(bytes, 1), BigInt.parse('112233445566778899aabbccddeeff11', radix: 16));
      expect(bytes.length, 1);
    });
    test('bytes256ToBigIntLittleAndRemoved', () {
      final List<int> bytes = <int>[
        0x33,
        0x22, 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa,
        0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22,
        0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99,
        0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11,
      ];
      expect(
        ints8ToBigInt256LittleAndRemoved(bytes, 1),
        BigInt.parse(
          '1122334455667788'
              '99aabbccddeeff11'
              '2233445566778899'
              'aabbccddeeff1122',
          radix: 16,
        ),
      );
      expect(bytes.length, 1);
    });

    test('bytesToBigIntBigAndRemoved', () {
      final List<int> bytes = <int>[ 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToBigIntBigAndRemoved(bytes, 1, 9), BigInt.parse('9988776655443322', radix: 16));
      expect(bytes.length, 2);
    });
    test('bytesNToBigIntBigAndRemoved', () {
      final List<int> bytes = <int>[ 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToBigIntNBigAndRemoved(bytes, 1), BigInt.parse('998877665544332211', radix: 16));
      expect(bytes.length, 1);
    });
    test('bytes64ToBigIntBigAndRemoved', () {
      final List<int> bytes = <int>[ 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToBigInt64BigAndRemoved(bytes, 1), BigInt.parse('9988776655443322', radix: 16));
      expect(bytes.length, 2);
    });
    test('bytes128ToBigIntBigAndRemoved', () {
      final List<int> bytes = <int>[ 0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11 ];
      expect(ints8ToBigInt128BigAndRemoved(bytes, 1), BigInt.parse('112233445566778899aabbccddeeff11', radix: 16));
      expect(bytes.length, 1);
    });
    test('bytes256ToBigIntBigAndRemoved', () {
      final List<int> bytes = <int>[
        0x00,
        0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
        0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11,
        0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
        0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11, 0x22,
      ];
      expect(
        ints8ToBigInt256BigAndRemoved(bytes, 1),
        BigInt.parse(
          '1122334455667788'
              '99aabbccddeeff11'
              '2233445566778899'
              'aabbccddeeff1122',
          radix: 16,
        ),
      );
      expect(bytes.length, 1);
    });

    test('bytesToBigIntAndRemoved', () {
      expect(
        ints8ToBigIntAndRemoved([ 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], 1, 9, Endian.little),
        BigInt.parse('2233445566778899', radix: 16),
      );
      expect(
        ints8ToBigIntAndRemoved([ 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], 1, 9, Endian.big),
        BigInt.parse('9988776655443322', radix: 16),
      );
    });
    test('bytesNToBigIntAndRemoved', () {
      expect(
        ints8ToBigIntNAndRemoved(
          [ 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
          offset: 1,
          endian: Endian.little,
        ),
        BigInt.parse('112233445566778899', radix: 16),
      );
      expect(
        ints8ToBigIntNAndRemoved(
          [ 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
          offset: 1,
          endian: Endian.big,
        ),
        BigInt.parse('998877665544332211', radix: 16),
      );
    });
    test('bytes64ToBigIntAndRemoved', () {
      expect(
        ints8ToBigInt64AndRemoved([ 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], endian: Endian.little),
        BigInt.parse('33445566778899aa', radix: 16),
      );
      expect(
        ints8ToBigInt64AndRemoved([ 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ], endian: Endian.big),
        BigInt.parse('aa99887766554433', radix: 16),
      );
    });
    test('bytes128ToBigIntAndRemoved', () {
      expect(
        ints8ToBigInt128AndRemoved(
          [ 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ],
          endian: Endian.little,
        ),
        BigInt.parse('112233445566778899aabbccddeeff11', radix: 16),
      );
      expect(
        ints8ToBigInt128AndRemoved(
          [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11 ],
          endian: Endian.big,
        ),
        BigInt.parse('112233445566778899aabbccddeeff11', radix: 16),
      );
    });
    test('bytes256ToBigIntAndRemoved', () {
      expect(
        ints8ToBigInt256AndRemoved(
          [
            0x22, 0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa,
            0x99, 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22,
            0x11, 0xff, 0xee, 0xdd, 0xcc, 0xbb, 0xaa, 0x99,
            0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11,
          ],
          endian: Endian.little,
        ),
        BigInt.parse(
          '1122334455667788'
              '99aabbccddeeff11'
              '2233445566778899'
              'aabbccddeeff1122',
          radix: 16,
        ),
      );
      expect(
        ints8ToBigInt256AndRemoved(
          [
            0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88,
            0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11,
            0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99,
            0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff, 0x11, 0x22,
          ],
          endian: Endian.big,
        ),
        BigInt.parse(
          '1122334455667788'
              '99aabbccddeeff11'
              '2233445566778899'
              'aabbccddeeff1122',
          radix: 16,
        ),
      );
    });
  });
  group('A group of double tests', () {
    test('doubleToBytes32', () {
      expect(double32ToInts8(2.1, Endian.little), [ 0x66, 0x66, 0x06, 0x40 ]);
      expect(double32ToInts8(2.1, Endian.big), [ 0x40, 0x06, 0x66, 0x66 ]);
    });
    test('doubleToBytes64', () {
      expect(double64ToInts8(2.1, Endian.little), [ 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x40 ]);
      expect(double64ToInts8(2.1, Endian.big), [ 0x40, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd ]);
    });
    test('bytes32ToDoubleLittle', () {
      const double deviation = 0.1;
      final double a = ints8ToDouble32Little([ 0x66, 0x66, 0x06, 0x40 ]);
      expect((a - 2.1).abs() < deviation, true);
    });
    test('bytes32ToDoubleBig', () {
      const double deviation = 0.1;
      final double a = ints8ToDouble32Big([ 0x40, 0x06, 0x66, 0x66 ]);
      expect((a - 2.1).abs() < deviation, true);
    });
    test('bytes32ToDouble', () {
      const double deviation = 0.1;

      final double a = ints8ToDouble32([ 0x66, 0x66, 0x06, 0x40 ], endian: Endian.little);
      expect((a - 2.1).abs() < deviation, true);

      final double b = ints8ToDouble32([ 0x40, 0x06, 0x66, 0x66 ], endian: Endian.big);
      expect((b - 2.1).abs() < deviation, true);
    });
    test('bytes64ToDoubleLittle', () {
      const double deviation = 0.1;
      final double a = ints8ToDouble64Little([ 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x40 ]);
      expect((a - 2.1).abs() < deviation, true);
    });
    test('bytes64ToDoubleBig', () {
      const double deviation = 0.1;
      final double a = ints8ToDouble64Big([ 0x40, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd ]);
      expect((a - 2.1).abs() < deviation, true);
    });
    test('bytes64ToDouble', () {
      const double deviation = 0.1;

      final double a = ints8ToDouble64(
        [ 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x40 ],
        endian: Endian.little,
      );
      expect((a - 2.1).abs() < deviation, true);

      final double b = ints8ToDouble64(
        [ 0x40, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd ],
        endian: Endian.big,
      );
      expect((b - 2.1).abs() < deviation, true);
    });
    test('bytes32ToDoubleLittleAndRemoved', () {
      const double deviation = 0.1;
      final double a = ints8ToDouble32LittleAndRemoved([ 0x66, 0x66, 0x06, 0x40 ]);
      expect((a - 2.1).abs() < deviation, true);
    });
    test('bytes32ToDoubleBigAndRemoved', () {
      const double deviation = 0.1;
      final double a = ints8ToDouble32BigAndRemoved([ 0x40, 0x06, 0x66, 0x66 ]);
      expect((a - 2.1).abs() < deviation, true);
    });
    test('bytes32ToDoubleAndRemoved', () {
      const double deviation = 0.1;

      final double a = ints8ToDouble32AndRemoved(
        [ 0x66, 0x66, 0x06, 0x40 ],
        endian: Endian.little,
      );
      expect((a - 2.1).abs() < deviation, true);

      final double b = ints8ToDouble32AndRemoved(
        [ 0x40, 0x06, 0x66, 0x66 ],
        endian: Endian.big,
      );
      expect((b - 2.1).abs() < deviation, true);
    });
    test('bytes64ToDoubleLittleAndRemoved', () {
      const double deviation = 0.1;
      final double a = ints8ToDouble64LittleAndRemoved([ 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x40 ]);
      expect((a - 2.1).abs() < deviation, true);
    });
    test('bytes64ToDoubleBigAndRemoved', () {
      const double deviation = 0.1;
      final double a = ints8ToDouble64BigAndRemoved([ 0x40, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd ]);
      expect((a - 2.1).abs() < deviation, true);
    });
    test('bytes64ToDoubleAndRemoved', () {
      const double deviation = 0.1;

      final double a = ints8ToDouble64AndRemoved(
        [ 0xcd, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0x00, 0x40 ],
        endian: Endian.little,
      );
      expect((a - 2.1).abs() < deviation, true);

      final double b = ints8ToDouble64AndRemoved(
        [ 0x40, 0x00, 0xcc, 0xcc, 0xcc, 0xcc, 0xcc, 0xcd ],
        endian: Endian.big,
      );
      expect((b - 2.1).abs() < deviation, true);
    });
  });
  group('A group of int tests', () {
    test('intToBytesLittle', () {
      expect(intToInts8Little(0x11223344, 4), [ 0x44, 0x33, 0x22, 0x11 ]);
      expect(intToInts8Little(0x112233, 4), [ 0x33, 0x22, 0x11, 0x00]);
      expect(intToInts8Little(0x11223344, 3), [ 0x44, 0x33, 0x22]);
      expect(intToInts8Little(0xffffffff, 4), [ 0xff, 0xff, 0xff, 0xff ]);
    });
    test('intToBytesBig', () {
      expect(intToInts8Big(0x11223344, 4), [ 0x11, 0x22, 0x33, 0x44 ]);
      expect(intToInts8Big(0x112233, 4), [ 0x00, 0x11, 0x22, 0x33]);
      expect(intToInts8Big(0x11223344, 3), [ 0x22, 0x33, 0x44]);
      expect(intToInts8Big(0xffffffff, 4), [ 0xff, 0xff, 0xff, 0xff ]);
    });
    test('intToBytes', () {
      expect(intToInts8(0x11223344, 4, Endian.little), [ 0x44, 0x33, 0x22, 0x11 ]);
      expect(intToInts8(0x11223344, 4, Endian.big), [ 0x11, 0x22, 0x33, 0x44 ]);
    });
    test('intToBytesNLittle', () {
      expect(intNToInts8Little(0x11223344), [ 0x44, 0x33, 0x22, 0x11 ]);
      expect(intNToInts8Little(0x00112233), [ 0x33, 0x22, 0x11 ]);
      expect(intNToInts8Little(0xffffffff), [ 0xff, 0xff, 0xff, 0xff ]);
    });
    test('intToBytesNBig', () {
      expect(intNToInts8Big(0x11223344), [ 0x11, 0x22, 0x33, 0x44 ]);
      expect(intNToInts8Big(0x00112233), [ 0x11, 0x22, 0x33]);
      expect(intNToInts8Big(0xffffffff), [ 0xff, 0xff, 0xff, 0xff ]);
    });
    test('intToBytesN', () {
      expect(intNToInts8(0x11223344, Endian.little), [ 0x44, 0x33, 0x22, 0x11 ]);
      expect(intNToInts8(0x11223344, Endian.big), [ 0x11, 0x22, 0x33, 0x44 ]);
    });
    test('intToBytes16Little', () {
      expect(int16ToInts8Little(0x1122), [ 0x22, 0x11 ]);
      expect(int16ToInts8Little(0x001122), [ 0x22, 0x11 ]);
      expect(int16ToInts8Little(0xffff), [ 0xff, 0xff ]);
    });
    test('intToBytes16Big', () {
      expect(int16ToInts8Big(0x1122), [ 0x11, 0x22 ]);
      expect(int16ToInts8Big(0x001122), [ 0x11, 0x22 ]);
      expect(int16ToInts8Big(0xffff), [ 0xff, 0xff ]);
    });
    test('intToBytes16', () {
      expect(int16ToInts8(0x1122, Endian.little), [ 0x22, 0x11 ]);
      expect(int16ToInts8(0x1122, Endian.big), [ 0x11, 0x22 ]);
    });
    test('intToBytes24Little', () {
      expect(int24ToInts8Little(0x112233), [ 0x33, 0x22, 0x11 ]);
      expect(int24ToInts8Little(0x00112233), [ 0x33, 0x22, 0x11 ]);
      expect(int24ToInts8Little(0xffffff), [ 0xff, 0xff, 0xff ]);
    });
    test('intToBytes24Big', () {
      expect(int24ToInts8Big(0x112233), [ 0x11, 0x22, 0x33 ]);
      expect(int24ToInts8Big(0x00112233), [ 0x11, 0x22, 0x33 ]);
      expect(int24ToInts8Big(0xffffff), [ 0xff, 0xff, 0xff ]);
    });
    test('intToBytes24', () {
      expect(int24ToInts8(0x112233, Endian.little), [ 0x33, 0x22, 0x11 ]);
      expect(int24ToInts8(0x112233, Endian.big), [ 0x11, 0x22, 0x33 ]);
    });
    test('intToBytes32Little', () {
      expect(int32ToInts8Little(0x11223344), [ 0x44, 0x33, 0x22, 0x11 ]);
      expect(int32ToInts8Little(0x0011223344), [ 0x44, 0x33, 0x22, 0x11 ]);
      expect(int32ToInts8Little(0xffffffff), [ 0xff, 0xff, 0xff, 0xff ]);
    });
    test('intToBytes32Big', () {
      expect(int32ToInts8Big(0x11223344), [ 0x11, 0x22, 0x33, 0x44 ]);
      expect(int32ToInts8Big(0x0011223344), [ 0x11, 0x22, 0x33, 0x44 ]);
      expect(int32ToInts8Big(0xffffffff), [ 0xff, 0xff, 0xff, 0xff ]);
    });
    test('intToBytes32', () {
      expect(int32ToInts8(0x11223344, Endian.little), [ 0x44, 0x33, 0x22, 0x11 ]);
      expect(int32ToInts8(0x11223344, Endian.big), [ 0x11, 0x22, 0x33, 0x44 ]);
    });
    test('intToBytes40Little', () {
      expect(int40ToInts8Little(0x1122334455), [ 0x55, 0x44, 0x33, 0x22, 0x11 ]);
      expect(int40ToInts8Little(0x001122334455), [ 0x55, 0x44, 0x33, 0x22, 0x11 ]);
      expect(int40ToInts8Little(0xffffffffff), [ 0xff, 0xff, 0xff, 0xff, 0xff ]);
    });
    test('intToBytes40Big', () {
      expect(int40ToInts8Big(0x1122334455), [ 0x11, 0x22, 0x33, 0x44, 0x55 ]);
      expect(int40ToInts8Big(0x001122334455), [ 0x11, 0x22, 0x33, 0x44, 0x55 ]);
      expect(int40ToInts8Big(0xffffffffff), [ 0xff, 0xff, 0xff, 0xff, 0xff ]);
    });
    test('intToBytes40', () {
      expect(int40ToInts8(0x1122334455, Endian.little), [ 0x55, 0x44, 0x33, 0x22, 0x11 ]);
      expect(int40ToInts8(0x1122334455, Endian.big), [ 0x11, 0x22, 0x33, 0x44, 0x55 ]);
    });
    test('intToBytes48Little', () {
      expect(int48ToInts8Little(0x112233445566), [ 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ]);
      expect(int48ToInts8Little(0x00112233445566), [ 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ]);
      expect(int48ToInts8Little(0xffffffffffff), [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ]);
    });
    test('intToBytes48Big', () {
      expect(int48ToInts8Big(0x112233445566), [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 ]);
      expect(int48ToInts8Big(0x00112233445566), [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 ]);
      expect(int48ToInts8Big(0xffffffffffff), [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ]);
    });
    test('intToBytes48', () {
      expect(int48ToInts8(0x112233445566, Endian.little), [ 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ]);
      expect(int48ToInts8(0x112233445566, Endian.big), [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66 ]);
    });
    test('intToBytes56Little', () {
      expect(int56ToInts8Little(0x11223344556677), [ 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ]);
      expect(int56ToInts8Little(0x0011223344556677), [ 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ]);
      expect(int56ToInts8Little(0xffffffffffffff), [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ]);
    });
    test('intToBytes56Big', () {
      expect(int56ToInts8Big(0x11223344556677), [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77 ]);
      expect(int56ToInts8Big(0x0011223344556677), [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77 ]);
      expect(int56ToInts8Big(0xffffffffffffff), [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ]);
    });
    test('intToBytes56', () {
      expect(int56ToInts8(0x11223344556677, Endian.little), [ 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ]);
      expect(int56ToInts8(0x11223344556677, Endian.big), [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77 ]);
    });
    test('intToBytes64Little', () {
      expect(int64ToInts8Little(0x1122334455667788), [ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ]);
      expect(int64ToInts8Little(0xffffffffffffffff), [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ]);
    });
    test('intToBytes64Big', () {
      expect(int64ToInts8Big(0x1122334455667788), [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88 ]);
      expect(int64ToInts8Big(0xffffffffffffffff), [ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff ]);
    });
    test('intToBytes64', () {
      expect(int64ToInts8(0x1122334455667788, Endian.little), [ 0x88, 0x77, 0x66, 0x55, 0x44, 0x33, 0x22, 0x11 ]);
      expect(int64ToInts8(0x1122334455667788, Endian.big), [ 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88 ]);
    });
    test('intsToIntLittle', () {
      expect(ints8ToIntLittle([ 0x44, 0x33, 0x22, 0x11 ], 0, 4), 0x11223344);
      expect(ints8ToIntLittle([ 0xff, 0xff, 0xff, 0xff ], 0, 4), 0xffffffff);
      expect(ints8ToIntLittle([ 0x44, 0x33, 0x22, 0x11 ], 1, 3), 0x2233);
    });
    test('intsToIntBig', () {
      expect(ints8ToIntBig([ 0x44, 0x33, 0x22, 0x11 ], 0, 4), 0x44332211);
      expect(ints8ToIntBig([ 0xff, 0xff, 0xff, 0xff ], 0, 4), 0xffffffff);
      expect(ints8ToIntBig([ 0x44, 0x33, 0x22, 0x11 ], 1, 3), 0x3322);
    });
    test('intsToInt', () {
      expect(ints8ToInt([ 0x44, 0x33, 0x22, 0x11 ], 0, 4, Endian.little), 0x11223344);
      expect(ints8ToInt([ 0x44, 0x33, 0x22, 0x11 ], 0, 4, Endian.big), 0x44332211);
    });
    test('intsNToIntLittle', () {
      expect(ints8ToIntNLittle([ 0x44, 0x33, 0x22, 0x11 ]), 0x11223344);
      expect(ints8ToIntNLittle([ 0xff, 0xff, 0xff, 0xff ]), 0xffffffff);
      expect(ints8ToIntNLittle([ 0x44, 0x33, 0x22, 0x11 ], 2), 0x1122);
    });
    test('intsNToIntBig', () {
      expect(ints8ToIntNBig([ 0x44, 0x33, 0x22, 0x11 ]), 0x44332211);
      expect(ints8ToIntNBig([ 0xff, 0xff, 0xff, 0xff ]), 0xffffffff);
      expect(ints8ToIntNBig([ 0x44, 0x33, 0x22, 0x11 ], 2), 0x2211);
    });
    test('intsNToInt', () {
      expect(ints8ToIntN([ 0x44, 0x33, 0x22, 0x11 ], endian: Endian.little), 0x11223344);
      expect(ints8ToIntN([ 0x44, 0x33, 0x22, 0x11 ], endian: Endian.big), 0x44332211);
    });
    test('ints16ToIntLittle', () {
      expect(ints8ToInt16Little([ 0x44, 0x33 ]), 0x3344);
      expect(ints8ToInt16Little([ 0xff, 0xff ]), 0xffff);
      expect(ints8ToInt16Little([ 0x44, 0x33, 0x22, 0x11 ], 1), 0x2233);
    });
    test('ints16ToIntBig', () {
      expect(ints8ToInt16Big([ 0x44, 0x33 ]), 0x4433);
      expect(ints8ToInt16Big([ 0xff, 0xff ]), 0xffff);
      expect(ints8ToInt16Big([ 0x44, 0x33, 0x22, 0x11 ], 1), 0x3322);
    });
    test('ints16ToInt', () {
      expect(ints8ToInt16([ 0x44, 0x33 ], endian: Endian.little), 0x3344);
      expect(ints8ToInt16([ 0x44, 0x33 ], endian: Endian.big), 0x4433);
    });
    test('ints24ToIntLittle', () {
      expect(ints8ToInt24Little([ 0x44, 0x33, 0x22 ]), 0x223344);
      expect(ints8ToInt24Little([ 0xff, 0xff, 0xff ]), 0xffffff);
      expect(ints8ToInt24Little([ 0x44, 0x33, 0x22, 0x11 ], 1), 0x112233);
    });
    test('ints24ToIntBig', () {
      expect(ints8ToInt24Big([ 0x44, 0x33, 0x22 ]), 0x443322);
      expect(ints8ToInt24Big([ 0xff, 0xff, 0xff ]), 0xffffff);
      expect(ints8ToInt24Big([ 0x44, 0x33, 0x22, 0x11 ], 1), 0x332211);
    });
    test('ints24ToInt', () {
      expect(ints8ToInt24([ 0x44, 0x33, 0x22 ], endian: Endian.little), 0x223344);
      expect(ints8ToInt24([ 0x44, 0x33, 0x22 ], endian: Endian.big), 0x443322);
    });
    test('ints32ToIntLittle', () {
      expect(ints8ToInt32Little([ 0x44, 0x33, 0x22, 0x11 ]), 0x11223344);
      expect(ints8ToInt32Little([ 0xff, 0xff, 0xff, 0xff ]), 0xffffffff);
      expect(ints8ToInt32Little([ 0x55, 0x44, 0x33, 0x22, 0x11 ], 1), 0x11223344);
    });
    test('ints8ToInt32Big', () {
      expect(ints8ToInt32Big([ 0x44, 0x33, 0x22, 0x11 ]), 0x44332211);
      expect(ints8ToInt32Big([ 0xff, 0xff, 0xff, 0xff ]), 0xffffffff);
      expect(ints8ToInt32Big([ 0x55, 0x44, 0x33, 0x22, 0x11 ], 1), 0x44332211);
    });
    test('ints32ToInt', () {
      expect(ints8ToInt32([ 0x44, 0x33, 0x22, 0x11 ], endian: Endian.little), 0x11223344);
      expect(ints8ToInt32([ 0x44, 0x33, 0x22, 0x11 ], endian: Endian.big), 0x44332211);
    });
    test('intsToIntLittleAndRemoved', () {
      final List<int> bytes = <int>[ 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToIntLittleAndRemoved(bytes, 1, 5), 0x11223344);
      expect(bytes.length, 1);
    });
    test('intsToIntBigAndRemoved', () {
      final List<int> bytes = <int>[ 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToIntBigAndRemoved(bytes, 1, 5), 0x44332211);
      expect(bytes.length, 1);
    });
    test('intsToIntAndRemoved', () {
      expect(ints8ToIntAndRemoved([ 0x44, 0x33, 0x22, 0x11 ], 0, 4, Endian.little), 0x11223344);
      expect(ints8ToIntAndRemoved([ 0x44, 0x33, 0x22, 0x11 ], 0, 4, Endian.big), 0x44332211);
    });
    test('intsNToIntLittleAndRemoved', () {
      final List<int> bytes = <int>[ 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToIntNLittleAndRemoved(bytes, 1), 0x11223344);
      expect(bytes.length, 1);
    });
    test('intsNToIntBigAndRemoved', () {
      final List<int> bytes = <int>[ 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToIntNBigAndRemoved(bytes, 1), 0x44332211);
      expect(bytes.length, 1);
    });
    test('intsNToIntAndRemoved', () {
      expect(ints8ToIntNAndRemoved([ 0x44, 0x33, 0x22, 0x11 ], endian: Endian.little), 0x11223344);
      expect(ints8ToIntNAndRemoved([ 0x44, 0x33, 0x22, 0x11 ], endian: Endian.big), 0x44332211);
    });
    test('ints16ToIntLittleAndRemoved', () {
      final List<int> bytes = <int>[ 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToInt16LittleAndRemoved(bytes, 1), 0x3344);
      expect(bytes.length, 3);
    });
    test('ints16ToIntBigAndRemoved', () {
      final List<int> bytes = <int>[ 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToInt16BigAndRemoved(bytes, 1), 0x4433);
      expect(bytes.length, 3);
    });
    test('ints16ToIntAndRemoved', () {
      expect(ints8ToInt16AndRemoved([ 0x44, 0x33, 0x22, 0x11 ], endian: Endian.little), 0x3344);
      expect(ints8ToInt16AndRemoved([ 0x44, 0x33, 0x22, 0x11 ], endian: Endian.big), 0x4433);
    });
    test('ints24ToIntLittleAndRemoved', () {
      final List<int> bytes = <int>[ 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToInt24LittleAndRemoved(bytes, 1), 0x223344);
      expect(bytes.length, 2);
    });
    test('ints24ToIntBigAndRemoved', () {
      final List<int> bytes = <int>[ 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToInt24BigAndRemoved(bytes, 1), 0x443322);
      expect(bytes.length, 2);
    });
    test('ints24ToIntAndRemoved', () {
      expect(ints8ToInt24AndRemoved([ 0x44, 0x33, 0x22, 0x11 ], endian: Endian.little), 0x223344);
      expect(ints8ToInt24AndRemoved([ 0x44, 0x33, 0x22, 0x11 ], endian: Endian.big), 0x443322);
    });
    test('ints32ToIntLittleAndRemoved', () {
      final List<int> bytes = <int>[ 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToInt32LittleAndRemoved(bytes, 1), 0x11223344);
      expect(bytes.length, 1);
    });
    test('ints32ToIntBigAndRemoved', () {
      final List<int> bytes = <int>[ 0x55, 0x44, 0x33, 0x22, 0x11 ];
      expect(ints8ToInt32BigAndRemoved(bytes, 1), 0x44332211);
      expect(bytes.length, 1);
    });
    test('ints32ToIntAndRemoved', () {
      expect(ints8ToInt32AndRemoved([ 0x44, 0x33, 0x22, 0x11 ], endian: Endian.little), 0x11223344);
      expect(ints8ToInt32AndRemoved([ 0x44, 0x33, 0x22, 0x11 ], endian: Endian.big), 0x44332211);
    });
  });
  group('A group of ints tests', () {
    test('ints16ToInts8Big', () {
      final List<int> ints16 = <int>[
        0x0011, 0x2233, 0x4455, 0x6677, 0x8899, 0xaabb, 0xccdd, 0xeeff,
      ];
      final List<int> ints8 = ints16ToInts8Big(ints16);
      expect(
        ints8,
        <int>[
          0x00, 0x11, 0x22, 0x33,
          0x44, 0x55, 0x66, 0x77,
          0x88, 0x99, 0xaa, 0xbb,
          0xcc, 0xdd, 0xee, 0xff,
        ],
      );
    });
    test('ints32ToInts8Big', () {
      final List<int> ints32 = <int>[ 0x00112233, 0x44556677, 0x8899aabb, 0xccddeeff ];
      final List<int> ints8 = ints32ToInts8Big(ints32);
      expect(
        ints8,
        <int>[
          0x00, 0x11, 0x22, 0x33,
          0x44, 0x55, 0x66, 0x77,
          0x88, 0x99, 0xaa, 0xbb,
          0xcc, 0xdd, 0xee, 0xff,
        ],
      );
    });

    test('ints16ToInts8Little', () {
      final List<int> ints16 = <int>[
        0x0011, 0x2233, 0x4455, 0x6677, 0x8899, 0xaabb, 0xccdd, 0xeeff,
      ];
      final List<int> ints8 = ints16ToInts8Little(ints16);
      expect(
        ints8,
        <int>[
          0xff, 0xee, 0xdd, 0xcc,
          0xbb, 0xaa, 0x99, 0x88,
          0x77, 0x66, 0x55, 0x44,
          0x33, 0x22, 0x11, 0x00,
        ],
      );
    });
    test('ints32ToInts8Little', () {
      final List<int> ints32 = <int>[ 0x00112233, 0x44556677, 0x8899aabb, 0xccddeeff ];
      final List<int> ints8 = ints32ToInts8Little(ints32);
      expect(
        ints8,
        <int>[
          0xff, 0xee, 0xdd, 0xcc,
          0xbb, 0xaa, 0x99, 0x88,
          0x77, 0x66, 0x55, 0x44,
          0x33, 0x22, 0x11, 0x00,
        ],
      );
    });

    test('ints16ToInts8', () {
      final List<int> ints16 = <int>[
        0x0011, 0x2233, 0x4455, 0x6677, 0x8899, 0xaabb, 0xccdd, 0xeeff,
      ];

      expect(
        ints16ToInts8(ints16, Endian.big),
        <int>[
          0x00, 0x11, 0x22, 0x33,
          0x44, 0x55, 0x66, 0x77,
          0x88, 0x99, 0xaa, 0xbb,
          0xcc, 0xdd, 0xee, 0xff,
        ],
      );
      expect(
        ints16ToInts8(ints16, Endian.little),
        <int>[
          0xff, 0xee, 0xdd, 0xcc,
          0xbb, 0xaa, 0x99, 0x88,
          0x77, 0x66, 0x55, 0x44,
          0x33, 0x22, 0x11, 0x00,
        ],
      );
    });
    test('ints32ToInts8', () {
      final List<int> ints32 = <int>[ 0x00112233, 0x44556677, 0x8899aabb, 0xccddeeff ];

      expect(
        ints32ToInts8(ints32, Endian.big),
        <int>[
          0x00, 0x11, 0x22, 0x33,
          0x44, 0x55, 0x66, 0x77,
          0x88, 0x99, 0xaa, 0xbb,
          0xcc, 0xdd, 0xee, 0xff,
        ],
      );
      expect(
        ints32ToInts8(ints32, Endian.little),
        <int>[
          0xff, 0xee, 0xdd, 0xcc,
          0xbb, 0xaa, 0x99, 0x88,
          0x77, 0x66, 0x55, 0x44,
          0x33, 0x22, 0x11, 0x00,
        ],
      );
    });

    test('getAndRemoveRangeFromBytes', () {
      final List<int> a = <int>[ 0x11, 0x22, 0x33, 0x44, 0x55 ];
      expect(getAndRemoveRangeFromInts(a, 1, 4), [ 0x22, 0x33, 0x44 ]);
      expect(a.length, 2);
    });
  });
}
